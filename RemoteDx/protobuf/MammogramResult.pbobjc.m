// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mammogram_result.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "MammogramResult.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MammogramResultRoot

@implementation MammogramResultRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MammogramResultRoot_FileDescriptor

static GPBFileDescriptor *MammogramResultRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum ResultImageType

GPBEnumDescriptor *ResultImageType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Uint8\000Uint16\000Float32\000Rgb\000Rgba\000";
    static const int32_t values[] = {
        ResultImageType_Uint8,
        ResultImageType_Uint16,
        ResultImageType_Float32,
        ResultImageType_Rgb,
        ResultImageType_Rgba,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ResultImageType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ResultImageType_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ResultImageType_IsValidValue(int32_t value__) {
  switch (value__) {
    case ResultImageType_Uint8:
    case ResultImageType_Uint16:
    case ResultImageType_Float32:
    case ResultImageType_Rgb:
    case ResultImageType_Rgba:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MammogramResult

@implementation MammogramResult

@dynamic hasImageId, imageId;
@dynamic hasWidth, width;
@dynamic hasHeight, height;
@dynamic hasScore, score;
@dynamic hasImtype, imtype;

typedef struct MammogramResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t width;
  int32_t height;
  float score;
  ResultImageType imtype;
  NSString *imageId;
} MammogramResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "imageId",
        .dataTypeSpecific.className = NULL,
        .number = MammogramResult_FieldNumber_ImageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MammogramResult__storage_, imageId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = MammogramResult_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MammogramResult__storage_, width),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = MammogramResult_FieldNumber_Height,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MammogramResult__storage_, height),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "score",
        .dataTypeSpecific.className = NULL,
        .number = MammogramResult_FieldNumber_Score,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MammogramResult__storage_, score),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "imtype",
        .dataTypeSpecific.enumDescFunc = ResultImageType_EnumDescriptor,
        .number = MammogramResult_FieldNumber_Imtype,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MammogramResult__storage_, imtype),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MammogramResult class]
                                     rootClass:[MammogramResultRoot class]
                                          file:MammogramResultRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MammogramResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
